#version 450 // phong shader

in vec2 vTexCoord;
in vec3 vNormal;
in vec3 vTangent;
in vec3 vBiTangent;
in vec4 vPosition;

out vec4 FragColour;

uniform sampler2D diffuseTexture;
uniform sampler2D specularTexture;
uniform sampler2D normalTexture;

uniform vec3 Ka; //material ambient
uniform vec3 Kd; // material diffuse
uniform vec3 Ks; // material specular
uniform float SpecularPower;

uniform vec3 Ia; //light ambient
uniform vec3 Id; //light diffuse
uniform vec3 Is; //light specular 
uniform vec3 lightDirection;

uniform vec3 cameraPosition;

void main()
{
	vec3 N = normalize(vNormal);
	vec3 L = normalize(lightDirection);

	vec3 T = normalize(vTangent);
	vec3 B = normalize(vBiTangent);
	
	mat3 TBN = mat3(T,B,N);


	vec3 texDiffuse = texture(diffuseTexture, vTexCoord).rgb;
	vec3 texSpecular = texture(specularTexture,vTexCoord).rgb;
	//vec3 texSpecular = vec3(1);
	vec3 texNormal = texture(normalTexture, vTexCoord).rgb;

	N = TBN * (texNormal * 2 - 1);

	//calculate lambert term? termination?
	float lambertTerm = max(0, dot(N, -L));

	//calculate view vector and reflection vector
	vec3 V = -normalize(cameraPosition - vPosition.xyz);
	vec3 R = reflect(L, N);

	//calulate speculat term
	float specularTerm = pow(max(0, dot(R,V)), SpecularPower);
	
	//calculate each light property
	//vec3 ambient = Ia * Ka;
	//vec3 diffuse =  Id * Kd * texDiffuse * lambertTerm;
	//vec3 specular = Is * Ks * texSpecular * specularTerm;

	vec3 ambient = vec3(0.1);
	vec3 diffuse = texDiffuse * lambertTerm;
	vec3 specular = vec3(0.5) * texSpecular * specularTerm;
	


	FragColour = vec4(ambient + diffuse + specular, 1);
	//FragColour = vec4(texSpecular + texDiffuse * 0.1 + texNormal ,1);
	//FragColour = vec4(texNormal, 1);
	//FragColour = vec4(texNormal  + texDiffuse, 1.0);
}